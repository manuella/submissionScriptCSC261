#!/bin/bash
 

# Author: Evan Manuella


: <<'ExplainForLoop'

Every iteration, var is going to be a new element of the command line arguments

First, we check if it is has the "*]" pattern, if it does
    -we compile it (depending on whether it is *scm or *c)
    -store the output as a file
    -convert the source to .pdf

Elif, we create change them to .pdfs


ExplainForLoop


: <<'ShortTermBugs'


Advice from adam: 
	run output | a2ps | pdf


Remove the file type for c before adding ".pdf"
*TOBEDELETED are not deleted

Make sure that the arrays containing the files are correct


**Test

We get 2 drivers.pdf


**


ShortTermBugs

#first argument (including [)


counter_pdf=0
counter_source=0

for var in "$@"
do
    
    file_name=$var

    
    #if a scheme driver
    if [  ${file_name%".scm]"} != $file_name ] #if there is a "]" at the end (Driver)
    then

        driver_with_type=${file_name%]}
        driver=${driver_with_type%.scm}

        enscript -p - -Escheme -2 -r --color $driver_with_type | ps2pdf - ${driver}.pdf
        
        touch "${driver}DELETEME" #Storing the transcript here

        mzscheme -l lang/plt-pretty-big-text.ss -f "./${driver_with_type}" > "${driver}DELETEME" > "${driver}TOBEDELETED"

        enscript -p - -2 -r  "${driver}DELETEME" |  ps2pdf - "${driver}Output.pdf"

        rm "${driver}TOBEDELETED"
	rm "${driver}DELETEME"

        pdf_files[counter_pdf]="${driver}Output.pdf"
        ((counter_pdf++))

        pdf_files[counter_pdf]="${driver}.pdf"
        ((counter_pdf++))

        source_files[counter_source]="$driver.scm"
        ((counter_source++)) 





    #if a c driver
    elif [ ${file_name%.c]} != "$file_name" ] 
    then 

        driver_with_type=${file_name%]}
        driver=${driver_with_type%.c}

        touch "${driver}DELETEME" #output of .c file goes here

        gcc -o "compiled_${driver}" ./${driver_with_type}

        "compiled_${driver}" > "${driver}DELETEME"

        a2ps "${driver}DELETEME" -o TempTOBEDELETED
        ps2pdf TempTOBEDELETED "${driver}Output.pdf"

        rm TempTOBEDELETED
        rm "compiled_${driver}"

        enscript -p - -2 -r "${driver_with_type}" |  ps2pdf - "${driver}.pdf"

        rm "${driver}DELETEME" #remove pesky temp file

        pdf_files[counter_pdf]="${driver}.pdf"
        ((counter_pdf++))

        pdf_files[counter_pdf]="${driver}Output.pdf"
        ((counter_pdf++))

        source_files[counter_source]="${driver}.c"
        ((counter_source++))


        
        
    elif [ "${file_name%.c}" != "$file_name" ] #then *.c
    then
        
        enscript -p - -Escheme -2 -r --color  $file_name  |  ps2pdf - "${file_name%.c}.pdf"
        #This should be able to handle make as well
        
        pdf_files[counter_pdf]="${file_name%.c}.pdf"
        ((counter_pdf++))
        
        source_files[counter_source]=$file_name
        ((counter_source++))
        
        
        
        
    #if a scheme file
    elif  [ "${file_name%.scm}" != "$file_name" ]; #Convert .scm file into .pdf and make sure it is not a driver
    then

        enscript -p - -Escheme -2 -r --color  ${file_name} | ps2pdf - ${file_name_loc%.scm}.pdf

        pdf_files[counter_pdf]=${file_name%.scm}.pdf
        ((count_pdf++))
       
        source_files[counter_source]=${file_name}
        ((counter_source++))
        

    #if a c file
    elif [ "${file_name%.c}" != "$file_name" ]  #if a c file
    then

        enscript -p - -Ec -2 -r --color  ${file_name}  |  ps2pdf - ${file_name%.c}.pdf
        
        pdf_files[counter_pdf]="${file_name%.c}.pdf"
        source_files[counter_source]=${file_name}
        
        ((counter_pdf++))
        ((counter_files++))
  
    else #file is not of recognized format
     echo  "File ${file_name} does not match recognized formats, Ignored"
     status=1
    fi

done


echo ${pdf_files[@]}
echo ${source_files[@]}

pdfconcat -o submission.pdf ${pdf_files[@]}

tar cf submission.tar submission.pdf ${source_files[@]}

#Any formatting issues reported via $status
exit $status
