#!/bin/bash
 

# Author: Evan Manuella

: <<'ExplainForLoop'

Every iteration, var is going to be a new element of the command line arguments

First, we check if it is has the "*]" pattern, if it does
    -we compile it (depending on whether it is *scm or *c)
    -store the output as a file
    -convert the source to .pdf

Elif, we create change them to .pdfs


ExplainForLoop


#first argument (including [)


counter_pdf=0
counter_source=0



for var in "$@"
do
    
    file_name=$var
    first_char=${file_name:0:1}
    

    #if a scheme driver
    if [[ "${file_name%]}" != "$file_name" ]] && [[  "${file_name%.scm]}" != "$file_name" ]] #if there is a "]" at the end (Driver)
    then

        driver_with_type=${file_name%]}
        driver=${driver_with_type%.scm}

        enscript -p - -Escheme -2 -r --color $driver_with_type | ps2pdf - ${driver}.pdf
        
        touch ${driver}.txt #Storing the transcript here
        mzscheme -l lang/plt-pretty-big-text.ss -f ./${driver_with_type} > ${driver}.txt
        enscript -p - -2 -r  ./${driver}.txt  |  ps2pdf - ${driver}.pdf
        
        pdf_files[counter_pdf]="${driver}.pdf"
        source_files[counter_source]="${driver}.scm"
        
    elif [[ "${file_name%]}" != "$file_name" ]] && [[  "${file_name%.c]}" != "$file_name" ]]
    then 
        touch ${driver}.txt #Storing the transcript here
        gcc -o ./MmMmMnNnN ./${driver}
        ./MmMmMnNnN > ${driver}.txt
        rm ./MmMmMnNnN #weird name to make sure I don't overwrite anything    
        enscript -p - -2 -r  ./${driver}.txt  |  ps2pdf - ${driver}output.pdf
            
    
        pdf_files[counter_pdf]=${driver}.pdf
        ((counter_pdf++))
        pdffiles[counter_pdf]=${driver}output.pdf
        source_files[counter_source]=${driver}.scm
        
        ((counter_pdf++))
        ((counter_files++))

        elif [ "${file_name%.c}" != "$file_name" ] #then *.c
        then
        
        enscript -p - -Escheme -2 -r --color  $file_name  |  ps2pdf - "${file_name%.c}.pdf"
        
        #This should be able to handle make as well
        
      
        
        pdf_files[counter_pdf]="${driver}.pdf"
        source_files[counter_source]="${driver}.scm"
        
        ((counter_pdf++))
        ((counter_files++))
        
    #if a scheme file
        elif  [ "${file_name%.scm}" != "$file_name" ]; #Convert .scm file into .pdf and make sure it is not a driver
        then
        file_name_loc=${file_name:1} #remove the "["
        file_name_loc=${file_name%]} #remove possible "]"
        
        enscript -p - -Escheme -2 -r --color  ${file_name_loc} | ps2pdf - "${file_name_loc%.scm}.pdf"
        
        
        pdf_files[counter_pdf]="${file_name_loc::4}.pdf"
        source_files[counter_source]=${file_name_loc}
        
        ((counter_source++))
        ((count_pdf++))
        
    #if a c file
        elif [ "${file_name%.c}" != "$file_name" ]  #if a c file
        then
        
        file_name_loc=${file_name:1} #remove the "["
        enscript -p - -Ec -2 -r --color  ${file_name}  |  ps2pdf - ${file_name%.c}.pdf
        
        pdf_files[counter_pdf]="${file_name_loc%.c}.pdf"
        source_files[counter_source]=${file_name_loc}
        
        ((counter_pdf++))
        ((counter_files++))
        fi
        #else
        #echo "File" var "does not meet preconditions"
        #fi
        done
        
#Any formatting issues reported via $status
        exit $status
        
        
