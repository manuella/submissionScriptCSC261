#!/bin/bash
 

# Author: Evan Manuella

: <<'yo' 

Usage This is specifically built for Grinnell CSC261 Artifical Intelligence.
I am generally absent-minded, so I tried stream-lining the submission process.

The process is detailed here:

http://www.cs.grinnell.edu/~weinman/courses/CSC261/2013F/assignments/index.html


input ex:

$script [doThis.scm withThis.scm] [doThis.c withThis.c]  justthis.scm

[ and ] pair denotes a driver with its sources preceding it

It is not necessary to use "[", but I include this for my own preference:
I want to be able to visually identify what drivers go with what sources.

If there is no driver for a source, it can be independent like justthis.scm

NOTES

This script has not been made to recognize files with different file extension, but the same name.
|
v
testfile.scm == testfile.c
You will get one output testfile.pdf
Depending on which came last, one will overwrite the other
 

Need to remember to delete the temporary .txt file used for driver output
Need to remember to remove compiled temp (for .c files)
Need to make sure that once a driver goes through the driver if, it should
not go through the standard .scm file
Need to remember to report issues via $status

Critical: What if 

yo


: <<'ExplainForLoop'

Every iteration, var is going to be a new element of the command line arguments

First, we check if it is has the "*]" pattern, if it does
    -we compile it (depending on whether it is *scm or *c)
    -store the output as a file
    -convert the source to .pdf

Elif, we create change them to .pdfs


ExplainForLoop


#first argument (including [)


counter_pdf=0
counter_source=0



for var in "$@"
do
    
    file_name=$var
    first_char=${file_name:0:1}
    

    #if a scheme driver
    if [[ "${file_name%]}" != "$file_name" ]] && [[  "${file_name%.scm]}" != "$file_name" ]] #if there is a "]" at the end (Driver)
    then

        driver_with_type=${file_name%]}
        driver=${driver_with_type%.scm}

        enscript -p - -Escheme -2 -r --color $driver_with_type | ps2pdf - ${driver}.pdf
        
        touch ${driver}.txt #Storing the transcript here
        mzscheme -l lang/plt-pretty-big-text.ss -f ./${driver_with_type} > ${driver}.txt
        enscript -p - -2 -r  ./${driver}.txt  |  ps2pdf - ${driver}.pdf
        
        pdf_files[counter_pdf]="${driver}.pdf"
        source_files[counter_source]="${driver}.scm"
        
    elif [[ "${file_name%]}" != "$file_name" ]] && [[  "${file_name%.c]}" != "$file_name" ]]
    then 
        touch ${driver}.txt #Storing the transcript here
        gcc -o ./MmMmMnNnN ./${driver}
        ./MmMmMnNnN > ${driver}.txt
        rm ./MmMmMnNnN #weird name to make sure I don't overwrite anything    
        enscript -p - -2 -r  ./${driver}.txt  |  ps2pdf - ${driver}output.pdf
            
    
        pdf_files[counter_pdf]=${driver}.pdf
        ((counter_pdf++))
        pdffiles[counter_pdf]=${driver}output.pdf
        source_files[counter_source]=${driver}.scm
        
        ((counter_pdf++))
        ((counter_files++))

        elif [ "${file_name%.c}" != "$file_name" ] #then *.c
        then
        
        enscript -p - -Escheme -2 -r --color  $file_name  |  ps2pdf - "${file_name%.c}.pdf"
        
        #This should be able to handle make as well
        
      
        
        pdf_files[counter_pdf]="${driver}.pdf"
        source_files[counter_source]="${driver}.scm"
        
        ((counter_pdf++))
        ((counter_files++))
        
    #if a scheme file
        elif  [ "${file_name%.scm}" != "$file_name" ]; #Convert .scm file into .pdf and make sure it is not a driver
        then
        file_name_loc=${file_name:1} #remove the "["
        file_name_loc=${file_name%]} #remove possible "]"
        
        enscript -p - -Escheme -2 -r --color  ${file_name_loc} | ps2pdf - "${file_name_loc%.scm}.pdf"
        
        
        pdf_files[counter_pdf]="${file_name_loc::4}.pdf"
        source_files[counter_source]=${file_name_loc}
        
        ((counter_source++))
        ((count_pdf++))
        
    #if a c file
        elif [ "${file_name%.c}" != "$file_name" ]  #if a c file
        then
        
        file_name_loc=${file_name:1} #remove the "["
        enscript -p - -Ec -2 -r --color  ${file_name}  |  ps2pdf - ${file_name%.c}.pdf
        
        pdf_files[counter_pdf]="${file_name_loc%.c}.pdf"
        source_files[counter_source]=${file_name_loc}
        
        ((counter_pdf++))
        ((counter_files++))
        fi
        #else
        #echo "File" var "does not meet preconditions"
        #fi
        done
        
#Any formatting issues reported via $status
        exit $status
        
        
